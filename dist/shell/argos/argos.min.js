'use strict';

/**
 * @namespace logErrors
 * @description get and set application global data
 * todo: send errors to server
 */
const logErrors = (function() {

  const module    = {};
  const self      = module;

  module.init = ()=> {
    self.addListeners();
  };

  module.addListeners = ()=> {
    window.onerror = function(message, source, lineno, colno, error) {
      let msg =
        `error: ${message}
        file: ${source}
        line: ${lineno}
        col: ${colno}
        error: ${error}`;
        log.error(msg)
    }
  };

  return {
    init: module.init
  };

})();

'use strict';

/**
 * @namespace globals
 * @description get and set application global data
 */
const globals = (function() {

  const module    = {};
  const self      = module;

  module.allRoutes  = {};
  module.allTexts   = {};

  module.getRoutes = ()=> {
    return self.allRoutes;
  };

  module.loadRoutes = ()=> {
    let instanceRest = new ApiRest();
    let deferred     = Q.defer();
    let uri          = './shell/theme/routes.json';;

    instanceRest.getResource(uri).then(
      (data)=> {
        self.allRoutes = data;
        deferred.resolve(data);
      },
      (error) => {
        log.error('error get routes: '+ error);
        deferred.reject();
      });
    return deferred.promise;
  };

  module.getTexts = ()=> {
    return self.allTexts;
  };

  module.loadTexts = ()=> {
    let instanceRest = new ApiRest();
    let deferred     = Q.defer();
    let lang         = config.getLang();
    let uri          = './shell/theme/langs/' + lang + '.json';

    instanceRest.getResource(uri).then(
      (data)=> {
        self.allTexts = data;
        deferred.resolve(data);
      },
      (error) => {
        log.error('error loadTexts: '+ error);
        deferred.reject();
      });
    return deferred.promise;
  };

  return {
    getRoutes:    module.getRoutes,
    loadRoutes:   module.loadRoutes,
    getTexts:     module.getTexts,
    loadTexts:    module.loadTexts
  };

})();

"use strict";

/*eslint-disable no-unused-vars*/
const config = (function() {
/*eslint-enable no-unused-vars*/

  let module  = {};
  let self    = module;

  module.config  = {
		'environment': 'develop',
		'lang': 'en_En'
  };

	module.route = {
		'stage': '',
  	'section': '',
    'forceEntry': false,
    'defaultState': 'main'
	};

  module.serviceWorkers = {
    'active': false
  };

  module.init = ()=> {
    let deferred = Q.defer();
    let urlConfig = './shell/theme/config.json';
    let restOptions = {
      'type': 'application/json',
      'showPreload': false,
      'errorInterceptor': true
    };
    let instanceRest = new ApiRest(restOptions);

    instanceRest.getResource(urlConfig).then(
      (data)=> {
        self.initAll(data);
        deferred.resolve();
      },
      (error) => {
        log.error('error get config data: '+ error);
        deferred.reject();
      });
      return deferred.promise;
  };

  module.initAll = (data)=> {
    self.config.environment     = data.generalData.environment;
    self.config.lang            = data.generalData.lang;
    self.serviceWorkers.active  = data.serviceWorkers.active;

    if ( data.rest.hasOwnProperty('restOptions') ) {
      restUtils.setOptionsDefault(data.rest.restOptions);
    }
    if ( data.rest.hasOwnProperty('specialCodes') ) {
      restUtils.setSpecialCodes(data.rest.specialCodes);
    }
  };

  module.getServiceWorkers = () => {
    return self.serviceWorkers;
  };

  module.setRoute = (_stage_, _section_)=> {
    if ( !_stage_) {
      log.warning('dont set route if stage is not defined');
      return;
    }
    self.route.stage    = _stage_;
    self.route.section  =  _section_ ?  _section_ : '';
  };

  module.getRoutes = ()=> {
    return self.route;
  };

  module.getEnvironment = ()=> {
    return self.config.environment;
  };

  module.getLang  = ()=> {
    return self.config.lang;
  };

  return {
    init:               module.init,
    setRoute:           module.setRoute,
    getRoutes:          module.getRoutes,
    getEnvironment:     module.getEnvironment,
    getLang:            module.getLang,
    getServiceWorkers:  module.getServiceWorkers
  };

 } )();

'use strict';

/**
 * @namespace log
 * @description secure console.log
 */
const log = (function() {

  const module    = {};
  const self      = module;

  const environment = config.getEnvironment();

  module.success = (msg)=> {
    if ( msg && environment !== 'production' ) {
      console.log('%c'+ msg, 'color: #45a163');
    }
  };

  module.log = (msg)=> {
    if ( msg && environment !== 'production' ) {
      console.log('%c'+ msg, 'color: #005999');
    }
  };

  module.warning = (msg)=> {
    if ( msg && environment !== 'production' ) {
      console.log('%c'+ msg, 'color: #f48024');
    }
  };

  module.error = (msg)=> {
    if ( msg && environment !== 'production' ) {
      console.log('%c'+ msg, 'color: #f42424');
    }
  };

  return {
    success:  module.success,
    log:      module.log,
    warning:  module.warning,
    error:    module.error
  };

})();

const restUtils = (function() {

  const module    = {};
  const self      = module;

  module.optionsDefault = {
    'type': 'application/json',
    'headers': [],
    'charset': 'utf-8',
    'showPreload': true,
    'errorInterceptor': true
  };

  module.codes = {
    'success': 'san-200',
    'notFound': 'san-404',
    'notAuth': 'san-403',
    'serverError': 'san-500',
    'tokenExpiration': '401',
    'tokenSanExpiration': 'san-441',
    'tokenCorporateExpiration': 'san-442'
  };

  module.prepareResponse = (e, req, options)=> {
    let validation        = {};
    let response          = options.type === 'application/json' ? self.parseResponse(e) : req.responseText;
    let blockingErrors400 = ['403', '405', '406', '413', '414', '415', '416', '417', '429'];
    let blockingErrors500  = /^5/;

    validation.isValid          = true,
    validation.content          = response;
    validation.errorDescription = '';

    if ( blockingErrors500.test(req.status) || blockingErrors400.indexOf(req.status) !== -1 ) {
      validation.isValid          = false;
      validation.errorDescription = req.status.statusText ? req.status.statusText : 'error server';
      return validation;
    }

    if ( !options ) {
      return validation;
    }

    if ( options.type === 'application/json' && !response ) {
      validation.isValid          = false;
      validation.errorDescription = 'error server: bad format json';
      return validation;
    }

    if ( response.hasOwnProperty('result') && response.result.code === self.codes.serverError ) {
      validation.isValid          = false;
      validation.errorDescription = response.result.message ? response.result.message : 'error server';
      return validation;
    }

    return validation;
  };

  module.parseResponse = (e)=> {
    let data = {};

    try {
       data = JSON.parse(e.target.responseText);
    } catch(error) {
      data = null;
      log.error('error parsing data', e);
    }
    return data;
  };

  module.validCode = (result)=> {
    if ( result.code === this.codes.success ) {
      return true;
    }
    return false;
  };

  module.checkTokenExpired = (result)=> {
    if ( result.code === this.codes.tokenSanExpiration ) {
      return true;
    }
    return false;
  };

  // todo, revisar
  module.resetToken = ()=> {
//     let deferred = Q.defer();
//
//     function reset(corporateToken) {
//       restToken.getAuthToken(corporateToken).then(function(data) {
//         restOptions.headers[0].value = data.authToken;
//         deferred.resolve();
//       });
//     }
//
//     if ( !config.tokenUrl ) {
//       restToken.getCorporateToken().then(function(corporateToken) {
//         reset(corporateToken);
//       });
//     } else {
//       reset(corporateToken);
//     }
//     return deferred.promise;
  };

  module.getOptionsDefault = ()=> {
    return JSON.parse(JSON.stringify(self.optionsDefault));
  };

  module.setOptionsDefault = (newOptions)=> {
    let key;

    if ( typeof newOptions !== 'object' ) {
      log.error('new options must be an object');
      return false;
    }
    for ( key in newOptions ) {
      self.optionsDefault.key = newOptions[key]
    }
    return true;
  };

  module.prepareQueryString = (queryString)=> {
    let query   = queryString || {};
    let output  = '?';
    let prop;

    for (prop in query) {
      if ({}.hasOwnProperty.call(query, prop)) {
        output += prop + '=' + query[prop] + '&';
      }
    }
    output = output.length ? output.slice(0, -1) : output;

    return output;
  };

  module.getSpecialCodes = ()=> {
    return self.codes;
  };

  module.setSpecialCodes = (specialCodes)=> {
    self.codes = specialCodes;
  };

  /* todo: preparar una alternativa no polymer */
  module.showPreloader = function() {
    let node = document.getElementById('js-mainPreload');

    if ( node ) {
      node.setAttribute('show', 'show');
    }
  };

  /* todo: preparar una alternativa no polymer */
  module.hidePreloader = function() {
    let node = document.getElementById('js-mainPreload');

    if ( node ) {
      node.setAttribute('show', 'hidden');
    }
  };

  module.showErrorServer = function(errorMsg) {
    msg.showErrorServer(errorMsg);
  };

  return {
    getOptionsDefault:  module.getOptionsDefault,
    setOptionsDefault:  module.setOptionsDefault,
    getSpecialCodes:    module.getSpecialCodes,
    setSpecialCodes:    module.setSpecialCodes,
    prepareQueryString: module.prepareQueryString,
    prepareResponse:    module.prepareResponse,
    showPreloader:      module.showPreloader,
    hidePreloader:      module.hidePreloader,
    showErrorServer:    module.showErrorServer
  };

})();

/**
 * @namespace ApiRest
 * @return {undefined}
 * @param {object} [optionsOverride] Set default options
 * optionsOverride = {
    'type': 'application/json',
    'headers': [{'key': 'foo', 'value': 'bar'}],
    'charset': 'ASCII',
    'showPreload': true,
    'errorInterceptor': true
    }
  };
 *
 * @description class for api rest.
 */

class ApiRest {

  constructor(optionsOverride) {
    this.options = optionsOverride ? this._setOptions(optionsOverride) : restUtils.getOptionsDefault();
  }

  _setOptions(optionsOverride) {
    let prop;
    let optionsDefault = restUtils.getOptionsDefault();

    for (prop in optionsOverride) {
      if ( optionsDefault.hasOwnProperty(prop) ) {
        optionsDefault[prop] = optionsOverride[prop];
      }
    }
    return optionsDefault;
  }

  _setHeaders(req) {
    let i = 0;
    let len;

    if ( this.options.hasOwnProperty('type') ) {
      req.setRequestHeader('Content-Type', this.options.type +'; charset='+this.options.charset);
    }
    if ( this.options.hasOwnProperty('headers') && this.options.headers.length ) {
      len = this.options.headers.length;
      for (; i<len; i++ ) {
        req.setRequestHeader(this.options.headers[i].key, this.options.headers[i].value);
      }
    }
    return req;
  }

  _doRequest(resource, verb, aditionalData) {
    let deferred  = Q.defer();
    let req           = new XMLHttpRequest();
    let queryString   = verb === 'GET' && typeof aditionalData === 'object' ? restUtils.prepareQueryString(aditionalData) : '';
    let postData      = verb !== 'GET' && aditionalData ? JSON.stringify(aditionalData) : '';
    let serverResponse = {};

    req.open(verb, resource + queryString, true);
    req = this._setHeaders(req);

    req.onreadystatechange = (e)=> {
      if ( req.readyState !== 4 ) {
        return;
      }
      serverResponse = restUtils.prepareResponse(e, req, this.options);

      if ( !serverResponse.isValid && this.options.errorInterceptor ) {
          restUtils.showErrorServer(serverResponse.errorDescription);
          deferred.reject(serverResponse.errorDescription);

      } else {
        if ( this.options.showPreload ) {
          restUtils.hidePreloader();
        }
       deferred.resolve(serverResponse.content);
      }
    }

    if ( this.options.showPreload ) {
      restUtils.showPreloader();
    }

    req.send(postData);
    return deferred.promise;
  }

  getResource(resource, queryString) {
    return this._doRequest(resource, 'GET', queryString);
  }

  postResource(resource, postData) {
    return this._doRequest(resource, 'POST', postData);
  }

  putResource(resource, putData) {
    return this._doRequest(resource, 'PUT', putData);
  }

  deleteResource(resource, deleteData) {
    return this._doRequest(resource, 'DELETE', deleteData);
  }

}

'use strict';

/**
 * @namespace router
 * @description proxy routes
 */
const router = (function() {

  const module    = {};
  const self      = module;

  module.routes   = [];
  module.titleApp = '';

  module.getQueryString = ()=> {
    let query      = window.location.search.substring(1);
    let  params    = {};
    let  temp      = [];
    let itemTemp   = [];
    let  i         = 0;
    let  len;

    if ( query === '' ) {
      return false;
    }
    if ( query.indexOf('&') !== -1 ) {
      temp = query.split('&');

    } else {
      temp.push(query);
    }
    len = temp.length;
    for (; i<len; i++ ) {
      itemTemp = temp[i].split('=');
      params[itemTemp[0]] = itemTemp[1];
    }
    return params;
  };

  module.cleanQueryString = ()=> {
    let url = window.location.href;

    url = url.split('?').shift();
    window.history.pushState({},'', url);
  };

  module.checkIsSupported = ()=> {
    if ('history' in window && 'pushState' in history) {
      return true;
    }
    return false;
  };

   module.selectHash = ()=> {
    let pathname  = location.pathname;
    let i         = 0;
    let len       = self.routes.length;
    let hashArr   = location.hash;

    if (hashArr === '') {
      for (i, len; i < len; i++) {
        if(self.routes[i].url === pathname){
          return self.routes[i];
        }
      }
    }
    return self.findRoute();
  };

   module.findRoute = ()=> {
    let route   = location.hash.replace('#', '').split('::').shift();
    let i       = 0;
    let  len    = self.routes.length;

    for (; i<len; i++) {
      if ( self.routes[i].state === route ) {
        return self.routes[i];
      }
    }
    return self.routes[0];
  };

  /* todo: si al final quito los params, simplificar */
  module.executeFunction = (functionName, context)=> {
    let args        = Array.prototype.slice.call(arguments, 2);
    let namespaces  = functionName.split('.');
    let func        = namespaces.pop();
    let i           = 0;
    let len         = namespaces.length;

    for (; i < len; i++) {
      context = context[namespaces[i]];
    }
    return context[func].apply(context, args);
  };

  module.setRoute = ()=> {
    let routeHash   = self.selectHash();
    let argumentsFn = location.hash.indexOf('::') !== -1 ? location.hash.split('::').pop() : '';
    let  routeGlobal = '';

    /* Esto permite que los enlaces anchor normales,
    que no están mapeados en el config, funcionen. */
    if ( !routeHash ) {
      return;
    }

    routeGlobal       = ( location.hash.split('::').shift() ).split('/');
    route.stage       = routeGlobal[0].replace('#', '');
    route.section     = routeGlobal[1];
    route.subsection  = routeGlobal[3];

    argumentsFn = argumentsFn !== '' ? argumentsFn : routeHash.hasOwnProperty('params') ? routeHash.params : undefined;
    argumentsFn = argumentsFn ? argumentsFn.split(',') : undefined;
    self.executeFunction(routeHash.controller, window, argumentsFn);
    history.replaceState(routeHash, routeHash.state, routeHash.url);
  };

  module.addListeners = ()=> {
    window.addEventListener('hashchange', ()=> {
      self.setRoute();
    });
  };

  /* todo: ojo, params */
  module.stateGo = (stage, params)=> {
    window.location.hash = stage+'::'+params;
  };

  module.init = (configRoutes)=> {
    if ( !self.checkIsSupported() ) {
      msg.showError('browser deprecated', 'No support api navigation');
      return;
    }

    self.titleApp   = document.title || 'app';
    self.routes     = configRoutes;

    self.addListeners();
    self.setRoute();
  };

  return {
    config:             module.init,
    stateGo:            module.stateGo,
    getQueryString:     module.getQueryString,
    cleanQueryString:   module.cleanQueryString,
    stateIsDefined:     module.stateIsDefined
  };

} )();

/*eslint-disable no-unused-vars*/
var msg = ( function() {
/*eslint-enable no-unused-vars*/

  var module = {

    destroyMsg: function(idMsg) {
      var id = '#'+idMsg;
      var timer = setTimeout(function() {
        Ak(id).remove();
        window.clearTimeout(timer);
      }, 5000);
    },

    showMsg: function(type, header, body) {
      var msgElement = document.createElement('san-notification');
      var idMsg = "msg-"+Date.now();
      var timer;

      header = header || '';
      body = body || '';

      msgElement.setAttribute('show', 'hidden');
      msgElement.setAttribute('header', header);
      msgElement.setAttribute('body', body);
      msgElement.setAttribute('type', type);
      msgElement.setAttribute('id', idMsg);
      document.body.appendChild(msgElement);

      timer = setTimeout(function() {
        msgElement.setAttribute('show', 'show');
        window.clearTimeout(timer);
      }, 100);

      if ( type !== 'alert' ) {
        module.destroyMsg(idMsg);
      }

    },

    showError: function(header, body) {
      module.showMsg('alert', header, body);
    },

    showWarning: function(header, body) {
      module.showMsg('warning', header, body);
    },

    showSuccess: function(header, body) {
      module.showMsg('success', header, body);
    },

    showErrorServer: function(error) {
      module.showMsg('alert', 'server error', error);
      if ( document.getElementById('js-mainPreload') ) {
        document.getElementById('js-mainPreload').setAttribute('show', 'hidden');
      }
    },

    showWarningModal: function(msg) {
      $('#msgModal').find('.js-msgModalSuccess').hide(300);
      $('#msgModal').find('.js-msgModalError').show(300);
      $('#js-msgModalBody').html(msg);
      $('#msgModal').addClass('warning').show();
    },

    showSuccessModal: function(msg) {
      $('#msgModal').find('.js-msgModalSuccess').show(300);
      $('#msgModal').find('.js-msgModalError').hide(300);
      $('#msgModal').addClass('success').show();

    },
  };

  return {
    showError: module.showError,
    showWarning: module.showWarning,
    showSuccess: module.showSuccess,
    showErrorServer: module.showErrorServer,
    showWarningModal: module.showWarningModal,
    showSuccessModal: module.showSuccessModal
  };

} )();