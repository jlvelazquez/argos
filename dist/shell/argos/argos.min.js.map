{"version":3,"sources":["argos-api-rest.js","argos-config.js","argos-globals.js","argos-log-errors.js","argos-log.js","argos-rest-utils.js"],"names":[],"mappingsvjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CCjfile":"argos.min.js","sourcesContent":["/**\r\n * @namespace ApiRest\r\n * @return {undefined}\r\n * @param {object} [optionsOverride] Set default options\r\n * optionsOverride = {\r\n    'type': 'application/json',\r\n    'headers': [{'key': 'foo', 'value': 'bar'}],\r\n    'charset': 'ASCII',\r\n    'showPreload': true,\r\n    'errorInterceptor': true\r\n    }\r\n  };\r\n *\r\n * @description class for api rest.\r\n */\r\n\r\nclass ApiRest {\r\n\r\n  constructor(optionsOverride) {\r\n    this.options = optionsOverride ? this._setOptions(optionsOverride) : restUtils.getOptionsDefault();\r\n  }\r\n\r\n  _setOptions(optionsOverride) {\r\n    let prop;\r\n    let optionsDefault = restUtils.getOptionsDefault();\r\n\r\n    for (prop in optionsOverride) {\r\n      if ( optionsDefault.hasOwnProperty(prop) ) {\r\n        optionsDefault[prop] = optionsOverride[prop];\r\n      }\r\n    }\r\n    return optionsDefault;\r\n  }\r\n\r\n  _setHeaders(req) {\r\n    let i = 0;\r\n    let len;\r\n\r\n    if ( this.options.hasOwnProperty('type') ) {\r\n      req.setRequestHeader('Content-Type', this.options.type +'; charset='+this.options.charset);\r\n    }\r\n    if ( this.options.hasOwnProperty('headers') && this.options.headers.length ) {\r\n      len = this.options.headers.length;\r\n      for (; i<len; i++ ) {\r\n        req.setRequestHeader(this.options.headers[i].key, this.options.headers[i].value);\r\n      }\r\n    }\r\n    return req;\r\n  }\r\n\r\n  _doRequest(resource, verb, aditionalData) {\r\n    let deferred  = Q.defer();\r\n    let req           = new XMLHttpRequest();\r\n    let queryString   = verb === 'GET' && typeof aditionalData === 'object' ? restUtils.prepareQueryString(aditionalData) : '';\r\n    let postData      = verb !== 'GET' && aditionalData ? JSON.stringify(aditionalData) : '';\r\n    let serverResponse = {};\r\n\r\n    req.open(verb, resource + queryString, true);\r\n    req = this._setHeaders(req);\r\n\r\n    req.onreadystatechange = (e)=> {\r\n      if ( req.readyState !== 4 ) {\r\n        return;\r\n      }\r\n      serverResponse = restUtils.prepareResponse(e, req, this.options);\r\n\r\n      if ( !serverResponse.isValid && this.options.errorInterceptor ) {\r\n          restUtils.showErrorServer(serverResponse.errorDescription);\r\n          deferred.reject(serverResponse.errorDescription);\r\n\r\n      } else {\r\n        if ( this.options.showPreload ) {\r\n          restUtils.hidePreloader();\r\n        }\r\n       deferred.resolve(serverResponse.content);\r\n      }\r\n    }\r\n\r\n    if ( this.options.showPreload ) {\r\n      restUtils.showPreloader();\r\n    }\r\n\r\n    req.send(postData);\r\n    return deferred.promise;\r\n  }\r\n\r\n  getResource(resource, queryString) {\r\n    return this._doRequest(resource, 'GET', queryString);\r\n  }\r\n\r\n  postResource(resource, postData) {\r\n    return this._doRequest(resource, 'POST', postData);\r\n  }\r\n\r\n  putResource(resource, putData) {\r\n    return this._doRequest(resource, 'PUT', putData);\r\n  }\r\n\r\n  deleteResource(resource, deleteData) {\r\n    return this._doRequest(resource, 'DELETE', deleteData);\r\n  }\r\n\r\n}\r\n","\"use strict\";\r\n\r\n/*eslint-disable no-unused-vars*/\r\nconst config = (function() {\r\n/*eslint-enable no-unused-vars*/\r\n\r\n  let module  = {};\r\n  let self    = module;\r\n\r\n  module.config  = {\r\n\t\t'environment': 'develop',\r\n\t\t'lang': 'en_En'\r\n  };\r\n\r\n\tmodule.route = {\r\n\t\t'stage': '',\r\n  \t'section': '',\r\n    'forceEntry': false,\r\n    'defaultState': 'main'\r\n\t};\r\n\r\n  module.serviceWorkers = {\r\n    'active': false\r\n  };\r\n\r\n  module.init = ()=> {\r\n    let deferred = Q.defer();\r\n    let urlConfig = './shell/theme/config.json';\r\n    let restOptions = {\r\n      'type': 'application/json',\r\n      'showPreload': false,\r\n      'errorInterceptor': true\r\n    };\r\n    let instanceRest = new ApiRest(restOptions);\r\n\r\n    instanceRest.getResource(urlConfig).then(\r\n      (data)=> {\r\n        self.initAll(data);\r\n        deferred.resolve();\r\n      },\r\n      (error) => {\r\n        log.error('error get config data: '+ error);\r\n        deferred.reject();\r\n      });\r\n      return deferred.promise;\r\n  };\r\n\r\n  module.initAll = (data)=> {\r\n    self.config.environment     = data.generalData.environment;\r\n    self.config.lang            = data.generalData.lang;\r\n    self.serviceWorkers.active  = data.serviceWorkers.active;\r\n\r\n    if ( data.rest.hasOwnProperty('restOptions') ) {\r\n      restUtils.setOptionsDefault(data.rest.restOptions);\r\n    }\r\n    if ( data.rest.hasOwnProperty('specialCodes') ) {\r\n      restUtils.setSpecialCodes(data.rest.specialCodes);\r\n    }\r\n  };\r\n\r\n  module.getServiceWorkers = () => {\r\n    return self.serviceWorkers;\r\n  };\r\n\r\n  module.setRoute = (_stage_, _section_)=> {\r\n    if ( !_stage_) {\r\n      log.warning('dont set route if stage is not defined');\r\n      return;\r\n    }\r\n    self.route.stage    = _stage_;\r\n    self.route.section  =  _section_ ?  _section_ : '';\r\n  };\r\n\r\n  module.getRoutes = ()=> {\r\n    return self.route;\r\n  };\r\n\r\n  module.getEnvironment = ()=> {\r\n    return self.config.environment;\r\n  };\r\n\r\n  module.getLang  = ()=> {\r\n    return self.config.lang;\r\n  };\r\n\r\n  return {\r\n    init:               module.init,\r\n    setRoute:           module.setRoute,\r\n    getRoutes:          module.getRoutes,\r\n    getEnvironment:     module.getEnvironment,\r\n    getLang:            module.getLang,\r\n    getServiceWorkers:  module.getServiceWorkers\r\n  };\r\n\r\n } )();\r\n","'use strict';\r\n\r\n/**\r\n * @namespace globals\r\n * @description get and set application global data\r\n */\r\nconst globals = (function() {\r\n\r\n  const module    = {};\r\n  const self      = module;\r\n\r\n  module.allRoutes  = {};\r\n  module.allTexts   = {};\r\n\r\n  module.getRoutes = ()=> {\r\n    return self.allRoutes;\r\n  };\r\n\r\n  module.loadRoutes = ()=> {\r\n    let instanceRest = new ApiRest();\r\n    let deferred     = Q.defer();\r\n    let uri          = './shell/theme/routes.json';;\r\n\r\n    instanceRest.getResource(uri).then(\r\n      (data)=> {\r\n        self.allRoutes = data;\r\n        deferred.resolve(data);\r\n      },\r\n      (error) => {\r\n        log.error('error get routes: '+ error);\r\n        deferred.reject();\r\n      });\r\n    return deferred.promise;\r\n  };\r\n\r\n  module.getTexts = ()=> {\r\n    return self.allTexts;\r\n  };\r\n\r\n  module.loadTexts = ()=> {\r\n    let instanceRest = new ApiRest();\r\n    let deferred     = Q.defer();\r\n    let lang         = config.getLang();\r\n    let uri          = './shell/theme/langs/' + lang + '.json';\r\n\r\n    instanceRest.getResource(uri).then(\r\n      (data)=> {\r\n        self.allTexts = data;\r\n        deferred.resolve(data);\r\n      },\r\n      (error) => {\r\n        log.error('error loadTexts: '+ error);\r\n        deferred.reject();\r\n      });\r\n    return deferred.promise;\r\n  };\r\n\r\n  return {\r\n    getRoutes:    module.getRoutes,\r\n    loadRoutes:   module.loadRoutes,\r\n    getTexts:     module.getTexts,\r\n    loadTexts:    module.loadTexts\r\n  };\r\n\r\n})();\r\n","'use strict';\r\n\r\n/**\r\n * @namespace logErrors\r\n * @description get and set application global data\r\n * todo: send errors to server\r\n */\r\nconst logErrors = (function() {\r\n\r\n  const module    = {};\r\n  const self      = module;\r\n\r\n  module.init = ()=> {\r\n    self.addListeners();\r\n  };\r\n\r\n  module.addListeners = ()=> {\r\n    window.onerror = function(message, source, lineno, colno, error) {\r\n      let msg =\r\n        `error: ${message}\r\n        file: ${source}\r\n        line: ${lineno}\r\n        col: ${colno}\r\n        error: ${error}`;\r\n        log.error(msg)\r\n    }\r\n  };\r\n\r\n  return {\r\n    init: module.init\r\n  };\r\n\r\n})();\r\n","'use strict';\r\n\r\n/**\r\n * @namespace log\r\n * @description secure console.log\r\n */\r\nconst log = (function() {\r\n\r\n  const module    = {};\r\n  const self      = module;\r\n\r\n  const environment = config.getEnvironment();\r\n\r\n  module.success = (msg)=> {\r\n    if ( msg && environment !== 'production' ) {\r\n      console.log('%c'+ msg, 'color: #45a163');\r\n    }\r\n  };\r\n\r\n  module.log = (msg)=> {\r\n    if ( msg && environment !== 'production' ) {\r\n      console.log('%c'+ msg, 'color: #005999');\r\n    }\r\n  };\r\n\r\n  module.warning = (msg)=> {\r\n    if ( msg && environment !== 'production' ) {\r\n      console.log('%c'+ msg, 'color: #f48024');\r\n    }\r\n  };\r\n\r\n  module.error = (msg)=> {\r\n    if ( msg && environment !== 'production' ) {\r\n      console.log('%c'+ msg, 'color: #f42424');\r\n    }\r\n  };\r\n\r\n  return {\r\n    success:  module.success,\r\n    log:      module.log,\r\n    warning:  module.warning,\r\n    error:    module.error\r\n  };\r\n\r\n})();\r\n","const restUtils = (function() {\r\n\r\n  const module    = {};\r\n  const self      = module;\r\n\r\n  module.optionsDefault = {\r\n    'type': 'application/json',\r\n    'headers': [],\r\n    'charset': 'utf-8',\r\n    'showPreload': true,\r\n    'errorInterceptor': true\r\n  };\r\n\r\n  module.codes = {\r\n    'success': 'san-200',\r\n    'notFound': 'san-404',\r\n    'notAuth': 'san-403',\r\n    'serverError': 'san-500',\r\n    'tokenExpiration': '401',\r\n    'tokenSanExpiration': 'san-441',\r\n    'tokenCorporateExpiration': 'san-442'\r\n  };\r\n\r\n  module.prepareResponse = (e, req, options)=> {\r\n    let validation        = {};\r\n    let response          = options.type === 'application/json' ? self.parseResponse(e) : req.responseText;\r\n    let blockingErrors400 = ['403', '405', '406', '413', '414', '415', '416', '417', '429'];\r\n    let blockingErrors500  = /^5/;\r\n\r\n    validation.isValid          = true,\r\n    validation.content          = response;\r\n    validation.errorDescription = '';\r\n\r\n    if ( blockingErrors500.test(req.status) || blockingErrors400.indexOf(req.status) !== -1 ) {\r\n      validation.isValid          = false;\r\n      validation.errorDescription = req.status.statusText ? req.status.statusText : 'error server';\r\n      return validation;\r\n    }\r\n\r\n    if ( !options ) {\r\n      return validation;\r\n    }\r\n\r\n    if ( options.type === 'application/json' && !response ) {\r\n      validation.isValid          = false;\r\n      validation.errorDescription = 'error server: bad format json';\r\n      return validation;\r\n    }\r\n\r\n    if ( response.hasOwnProperty('result') && response.result.code === self.codes.serverError ) {\r\n      validation.isValid          = false;\r\n      validation.errorDescription = response.result.message ? response.result.message : 'error server';\r\n      return validation;\r\n    }\r\n\r\n    return validation;\r\n  };\r\n\r\n  module.parseResponse = (e)=> {\r\n    let data = {};\r\n\r\n    try {\r\n       data = JSON.parse(e.target.responseText);\r\n    } catch(error) {\r\n      data = null;\r\n      log.error('error parsing data', e);\r\n    }\r\n    return data;\r\n  };\r\n\r\n  module.validCode = (result)=> {\r\n    if ( result.code === this.codes.success ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  module.checkTokenExpired = (result)=> {\r\n    if ( result.code === this.codes.tokenSanExpiration ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // todo, revisar\r\n  module.resetToken = ()=> {\r\n//     let deferred = Q.defer();\r\n//\r\n//     function reset(corporateToken) {\r\n//       restToken.getAuthToken(corporateToken).then(function(data) {\r\n//         restOptions.headers[0].value = data.authToken;\r\n//         deferred.resolve();\r\n//       });\r\n//     }\r\n//\r\n//     if ( !config.tokenUrl ) {\r\n//       restToken.getCorporateToken().then(function(corporateToken) {\r\n//         reset(corporateToken);\r\n//       });\r\n//     } else {\r\n//       reset(corporateToken);\r\n//     }\r\n//     return deferred.promise;\r\n  };\r\n\r\n  module.getOptionsDefault = ()=> {\r\n    return JSON.parse(JSON.stringify(self.optionsDefault));\r\n  };\r\n\r\n  module.setOptionsDefault = (newOptions)=> {\r\n    let key;\r\n\r\n    if ( typeof newOptions !== 'object' ) {\r\n      log.error('new options must be an object');\r\n      return false;\r\n    }\r\n    for ( key in newOptions ) {\r\n      self.optionsDefault.key = newOptions[key]\r\n    }\r\n    return true;\r\n  };\r\n\r\n  module.prepareQueryString = (queryString)=> {\r\n    let query   = queryString || {};\r\n    let output  = '?';\r\n    let prop;\r\n\r\n    for (prop in query) {\r\n      if ({}.hasOwnProperty.call(query, prop)) {\r\n        output += prop + '=' + query[prop] + '&';\r\n      }\r\n    }\r\n    output = output.length ? output.slice(0, -1) : output;\r\n\r\n    return output;\r\n  };\r\n\r\n  module.getSpecialCodes = ()=> {\r\n    return self.codes;\r\n  };\r\n\r\n  module.setSpecialCodes = (specialCodes)=> {\r\n    self.codes = specialCodes;\r\n  };\r\n\r\n  /* todo: preparar una alternativa no polymer */\r\n  module.showPreloader = function() {\r\n    let node = document.getElementById('js-mainPreload');\r\n\r\n    if ( node ) {\r\n      node.setAttribute('show', 'show');\r\n    }\r\n  };\r\n\r\n  /* todo: preparar una alternativa no polymer */\r\n  module.hidePreloader = function() {\r\n    let node = document.getElementById('js-mainPreload');\r\n\r\n    if ( node ) {\r\n      node.setAttribute('show', 'hidden');\r\n    }\r\n  };\r\n\r\n  module.showErrorServer = function(errorMsg) {\r\n    msg.showErrorServer(errorMsg);\r\n  };\r\n\r\n  return {\r\n    getOptionsDefault:  module.getOptionsDefault,\r\n    setOptionsDefault:  module.setOptionsDefault,\r\n    getSpecialCodes:    module.getSpecialCodes,\r\n    setSpecialCodes:    module.setSpecialCodes,\r\n    prepareQueryString: module.prepareQueryString,\r\n    prepareResponse:    module.prepareResponse,\r\n    showPreloader:      module.showPreloader,\r\n    hidePreloader:      module.hidePreloader,\r\n    showErrorServer:    module.showErrorServer\r\n  };\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}